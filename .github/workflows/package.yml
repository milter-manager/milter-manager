name: Package
on:
  - push
  - pull_request
jobs:
  source:
    name: Source
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: recursive
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y -V \
            ccache \
            curl \
            gtk-doc-tools \
            inkscape \
            intltool \
            libev-dev \
            poxml
          echo "/usr/lib/ccache" >> $GITHUB_PATH
          sudo gem install \
            fast_gettext \
            gio2 \
            rdtool \
            rttool
      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: source-ccache-${{ hashFiles('libmilter/**', 'milter/**', 'src/**', 'tool/**', 'test/**') }}
          restore-keys: source-ccache-
      - run: ./autogen.sh
      - run: mkdir -p .build
      - name: Configure
        run: |
          ../configure \
            --enable-gtk-doc
        working-directory: .build
      - run: make -j$(nproc)
        working-directory: .build
      - run: make distcheck
        working-directory: .build
      - run: mv .build/milter-manager-*.tar.gz ./
      - name: Show binding/ruby/test/ log
        if: failure()
        run: |
          cat .build/milter-manager-*/_build/sub/binding/ruby/test/test-suite.log || :
      - name: Show test/tool/ log
        if: failure()
        run: |
          cat .build/milter-manager-*/_build/sub/test/tool/test-suite.log || :
      - name: Show test/ log
        if: failure()
        run: |
          cat .build/milter-manager-*/_build/sub/test/test-suite.log || :

      # Artifact
      - uses: actions/upload-artifact@v4
        with:
          name: source
          path: milter-manager-*.tar.gz

      # Release
      - uses: actions/checkout@v5
        if: |
          startsWith(github.ref, 'refs/tags/')
        with:
          repository: milter-manager/milter-manager.github.io
          path: milter-manager.github.io
      - name: Release
        if: |
          startsWith(github.ref, 'refs/tags/')
        run: |
          ruby \
            -e 'print("## milter manager "); \
                puts(ARGF.read.split(/^## /)[1].gsub(/ {.+?}/, ""))' \
            milter-manager.github.io/news/index.md > release-note.md
          title="$(head -n1 release-note.md | sed -e 's/^## //')"
          tail -n +2 release-note.md > release-note-without-version.md
          gh release create ${GITHUB_REF_NAME} \
            --discussion-category Releases \
            --notes-file release-note-without-version.md \
            --title "${title}" \
            milter-manager-*.tar.gz
        env:
          GH_TOKEN: ${{ github.token }}

  build:
    name: Build
    needs: source
    strategy:
      fail-fast: false
      matrix:
        id:
          - debian-bullseye
          - debian-bookworm
          - debian-trixie
          - ubuntu-jammy
          - almalinux-8
          - almalinux-9
          - almalinux-10
    env:
      APACHE_ARROW_REPOSITORY: ${{ github.workspace }}/apache-arrow
      GROONGA_REPOSITORY: ${{ github.workspace }}/groonga
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Prepare
        run: |
          case ${{ matrix.id }} in
            debian-*|ubuntu-*)
              echo "TASK_NAMESPACE=apt" >> "${GITHUB_ENV}"
              ;;
            almalinux-*)
              echo "TASK_NAMESPACE=yum" >> "${GITHUB_ENV}"
              ;;
          esac
      - uses: actions/checkout@v5
        with:
          submodules: recursive
      - uses: actions/checkout@v5
        with:
          path: groonga
          repository: groonga/groonga
          submodules: recursive
      - uses: actions/checkout@v5
        with:
          path: apache-arrow
          repository: apache/arrow
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt -V install \
            devscripts \
            qemu-user-static \
            ruby
      - uses: actions/download-artifact@v5
        with:
          name: source
      - name: Update version
        if: |
          !startsWith(github.ref, 'refs/tags/') &&
          !startsWith(github.ref, 'refs/heads/maintenance/')
        run: |
          cd package
          rake version:update RELEASE_DATE=$(date +%Y-%m-%d)
      - name: Login to GitHub Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: package/${{ env.TASK_NAMESPACE }}/build/${{ matrix.id }}/ccache
          key: package-${{ matrix.id }}-ccache-${{ hashFiles('libmilter/**', 'milter/**', 'src/**', 'tool/**', 'test/**') }}
          restore-keys: package-${{ matrix.id }}-ccache-
      - name: Build with Docker
        run: |
          cd package
          rake docker:pull || :
          rake ${TASK_NAMESPACE}:build BUILD_DIR=build
        env:
          APT_TARGETS: ${{ matrix.id }}
          YUM_TARGETS: ${{ matrix.id }}
      - name: Push the built Docker image
        continue-on-error: true
        run: |
          cd package
          rake docker:push
        env:
          APT_TARGETS: ${{ matrix.id }}
          YUM_TARGETS: ${{ matrix.id }}

      # Artifact
      - uses: actions/upload-artifact@v4
        with:
          name: package-${{ matrix.id }}
          path: package/${{ env.TASK_NAMESPACE }}/repositories/

      # Release
      - name: Create assets
        if: |
          startsWith(github.ref, 'refs/tags/')
        run: |
          tar czf ${{ matrix.id }}.tar.gz package/${TASK_NAMESPACE}/repositories/
      - name: Upload to release
        if: |
          startsWith(github.ref, 'refs/tags/')
        run: |
          gh release upload ${GITHUB_REF_NAME} \
            ${{ matrix.id }}.tar.gz
        env:
          GH_TOKEN: ${{ github.token }}

  test:
    name: Test
    needs: build
    strategy:
      fail-fast: false
      matrix:
        id:
          - debian-bullseye
          - debian-bookworm
          - debian-trixie
          - ubuntu-jammy
          - almalinux-8
          - almalinux-9
          - almalinux-10
        include:
          - label: Debian GNU/Linux bullseye
            id: debian-bullseye
            task-namespace: apt
            image: images:debian/11
          - label: Debian GNU/Linux bookworm
            id: debian-bookworm
            task-namespace: apt
            image: images:debian/12
          - label: Debian GNU/Linux trixie
            id: debian-trixie
            task-namespace: apt
            image: images:debian/13
          - label: Ubuntu Jammy Jellyfish
            id: ubuntu-jammy
            task-namespace: apt
            image: images:ubuntu/22.04
          - label: AlmaLinux 8
            id: almalinux-8
            task-namespace: yum
            image: images:almalinux/8
          - label: AlmaLinux 9
            id: almalinux-9
            task-namespace: yum
            image: images:almalinux/9
          - label: AlmaLinux 10
            id: almalinux-10
            task-namespace: yum
            image: images:almalinux/10
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Prepare
        run: |
          id=${{ matrix.id }}
          case ${id} in
            debian-bullseye)
              echo "TASK_NAMESPACE=apt" >> "${GITHUB_ENV}"
              echo "IMAGE=debian/11" >> "${GITHUB_ENV}"
              ;;
            debian-bookworm)
              echo "TASK_NAMESPACE=apt" >> "${GITHUB_ENV}"
              echo "IMAGE=debian/12" >> "${GITHUB_ENV}"
              ;;
            debian-trixie)
              echo "TASK_NAMESPACE=apt" >> "${GITHUB_ENV}"
              echo "IMAGE=debian/13" >> "${GITHUB_ENV}"
              ;;
            ubuntu-jammy)
              echo "TASK_NAMESPACE=apt" >> "${GITHUB_ENV}"
              echo "IMAGE=ubuntu/22.04" >> "${GITHUB_ENV}"
              ;;
            almalinux-*)
              echo "TASK_NAMESPACE=yum" >> "${GITHUB_ENV}"
              version=${id#almalinux-}
              echo "IMAGE=almalinux/${version}" >> "${GITHUB_ENV}"
              ;;
          esac
      - uses: actions/checkout@v5
      - uses: actions/download-artifact@v5
        with:
          name: package-${{ matrix.id }}
          path: package/${{ env.TASK_NAMESPACE }}/repositories
      - name: Install Incus
        run: |
          sudo apt update
          sudo apt install -y -V incus
      - name: Allow egress network traffic flows for Incus
        # https://linuxcontainers.org/incus/docs/main/howto/network_bridge_firewalld/#prevent-connectivity-issues-with-incus-and-docker
        run: |
          sudo iptables -I DOCKER-USER -i incusbr0 -j ACCEPT
          sudo iptables -I DOCKER-USER -o incusbr0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
      - name: Setup Incus
        run: |
          sudo incus admin init --auto
      - name: Prepare image
        run: |
          sudo incus launch images:${IMAGE} target
          sudo incus config device add target host disk source=$PWD path=/host
          # https://discuss.linuxcontainers.org/t/network-issue-with-almalinux-8-9-on-github-actions-using-incus/20046
          sleep 10
      - name: Run test
        run: |
          sudo incus exec target -- /host/package/${TASK_NAMESPACE}/test.sh
