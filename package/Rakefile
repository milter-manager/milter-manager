# Copyright(C) 2022-2025  Sutou Kouhei <kou@clear-code.com>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

groonga_repository = ENV["GROONGA_REPOSITORY"]
if groonga_repository.nil?
  raise "Specify GROONGA_REPOSITORY environment variable"
end
require "#{groonga_repository}/packages/packages-groonga-org-package-task"

class MilterManagerTask < PackagesGroongaOrgPackageTask
  def initialize
    super("milter-manager", detect_version, detect_release_time)
  end

  def define
    super
    define_source_tasks
  end

  private
  def detect_version
    version_env = ENV["VERSION"]
    return version_env if version_env

    major = nil
    minor = nil
    micro = nil
    configure_ac_path = File.join(__dir__, "..", "configure.ac")
    File.open(configure_ac_path) do |configure_ac|
      configure_ac.each_line do |line|
        case line
        when /\Am4_define\(\[milter_manager_version_major\], \[(\d+)\]\)/
          major = $1
        when /\Am4_define\(\[milter_manager_version_minor\], \[(\d+)\]\)/
          minor = $1
        when /\Am4_define\(\[milter_manager_version_micro\], \[(\d+)\]\)/
          micro = $1
        end
      end
    end
    "#{major}.#{minor}.#{micro}"
  end

  def define_archive_task
    file @archive_name do
      if File.exist?("../#{@archive_name}")
        ln_s("../#{@archive_name}",
             @archive_name)
      else
        download("https://github.com/milter-manager/milter-manager/releases/download/#{@version}/#{@archive_name}",
                 @archive_name)
      end
    end
  end

  def docker_image(os, architecture)
    "ghcr.io/milter-manager/#{super}"
  end

  def enable_windows?
    false
  end

  def dput_configuration_name
    ENV["DPUT_CONFIGURATION_NAME"] || "milter-manager-ppa"
  end

  def dput_incoming
    ENV["DPUT_INCOMING"] || "~milter-manager/ppa/ubuntu/"
  end

  def apt_targets_default
    [
      "debian-bullseye",
      "debian-bookworm",
      "debian-trixie",
    ]
  end

  def yum_targets_default
    [
      "almalinux-8",
      "almalinux-9",
      "almalinux-10",
    ]
  end

  def use_built_package?
    true
  end

  def github_repository
    "milter-manager/milter-manager"
  end

  def github_actions_workflow_file_name(target_namespace, target)
    "package.yml"
  end

  def github_actions_artifact_name(target_namespace, target)
    target
  end

  def built_package_url(target_namespace, target)
    url = "https://github.com/milter-manager/milter-manager/releases/download/#{@version}/"
    url << "#{target}.tar.gz"
    url
  end

  def built_package_n_split_components
    3
  end

  def release(target_namespace)
    base_dir = __send__("#{target_namespace}_dir")
    repositories_dir = Pathname("#{base_dir}/repositories")
    repositories_dir.glob("**/*.{deb,dsc,rpm}") do |path|
      case path.extname
      when ".deb", ".dsc"
        relative_path = path.relative_path_from(repositories_dir)
        # e.g.: "debian/pool/bullseye/main/m/milter-manager/milter-manager_*.deb"
        components = relative_path.to_s.split("/")
        distribution = components[0]
        version = components[2]
      when ".rpm"
        relative_path = path.relative_path_from(repositories_dir)
        # e.g.: "centos/7/x86_64/Packages/milter-manager-*.rpm"
        components = relative_path.to_s.split("/")
        distribution = "el"
        version = components[1]
      end
      sh("package_cloud",
         "push",
         "milter-manager/repos/#{distribution}/#{version}",
         path.to_s)
    end
  end

  def gpg_uid
    File.read(File.join(__dir__, "..", "gpg_uid")).strip
  end

  def source_dir
    "source"
  end

  def define_source_tasks
    source_tasks = []
    namespace :source do
      archive_asc = "#{@archive_name}.asc"
      file archive_asc => @archive_name do
        sh("gpg",
           "--armor",
           "--detach-sign",
           "--local-user",  gpg_uid,
           "--yes",
           @archive_name)
      end

      desc "Upload sign"
      source_tasks << :upload
      task :upload => archive_asc do
        require "octokit"
        client = Octokit::Client.new
        client.access_token = github_access_token
        release_path = "/repos/#{github_repository}/releases/tags/#{@version}"
        client.upload_asset(release_path, archive_asc)
      end
    end
    task :source => source_tasks.collect {|task| "source:#{task}"}
  end
end

task = MilterManagerTask.new
task.define
